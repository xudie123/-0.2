[命令一]pwd(print work diectory)显示当前终端会话所在的目录位置
D:\re01> pwd

Path
----
D:\re01(D盘Re01目录)

PS D:\> pwd

Path
----
D:\ 

[命令三]ls(list file)是显示当前目录下的所有文件
PS D:\re01> ls

[命令三]cd(change directory)是切换目录,后面跟路径,两个点是上一级
PS D:\re01> cd..
PS D:\> 



PS D:\re01> git version
git version 2.35.1.windows.1

设置昵称和邮箱
user是用户,name是昵称,email是邮箱
PS D:\re01> git config --global user.name "hudie"
PS D:\re01> git config --global user.email "3394144962@qq.com"

在当前目录初始化,创建一个.git隐藏文件夹,文件夹里面会保存我们文件的每个git版本记录和变化,
初始化之后,其实文件还没有被记录,我们要使用命令git add,把文件加进git版本控制系统中,命令后要跟文件名,比如git add test.txt
PS D:\re01> git init
Reinitialized existing Git repository in D:/re01/.git/
PS D:\re01> git add te.txt

那如果文件比较多怎么办?
一个一个添加太麻烦了,就可以使用add.,这里点号代表当前目录的全部文件,添加进去之后,git只是暂时保存,还不会保存提交记录
我们还要使用git commit(提交)命令,可以把刚才暂时保存的变更,提交固定成一个版本
git commit 会打开一个叫vim的终端编辑器让你写提交说明,几乎所有新手都会在这一步踩坑,因为vim
操作比较反人类,打开vim的时候默认是不能写东西的,你要按a或i进入编辑模式,然后写几个字的说明,
写完先按esc退出编辑模式,然后再输入英文冒号,注意是英文状态下的冒号,然后写wq(write quit),保存并退出

git log 查看
PS D:\re22> git log
commit 6bbad2bbdb238ef74d266fb7b709454e9c1d5bef (HEAD -> master)
Author: hudie <3394144962@qq.com>
Date:   Sun Mar 19 15:19:25 2023 +0800

    第一次提交
PS D:\re22> git add .
PS D:\re22> git commit -m "第二次提交"
[master 66d5b79] 第二次提交
 1 file changed, 6 insertions(+), 1 deletion(-)

 git commit -m "第二次提交" 提交说明的简化操作,它会跳过vim编辑,大部分人都会用这种方式写提交说明,

 git history diff插件,可以看到所有历史提交

 PS D:\re22> git reset --hard 74b68a9f608fa8f83a382b186707440438645501(commit id)
HEAD is now at 74b68a9 第五次修改

在不同版本中切换,branch,顾名思义,分支就是把当前版本复制一份,你可以在commit第二次的时候,用git branch 0.2命令创建一个0.2分支
git branch 0.2
在commit第二次的时候,用git branch 0.3命令创建一个0.3分支
git branch 0.2

git checkout 0.3 命令不断切换分支

branch作用不仅仅切换版本,更重要的是,你可以在主流写代码,也可以在支流写代码,然后某一天把这两条分支用git merge合并在一起,

